/*
js 코드
const draw = (n, x, y) => {
    if (n == 1) return 1;
    if (y < n/2 && x < n/2)  return Math.pow((n/2), 2) + draw(n/2, x%(n/2), y%(n/2));
    if (y < n/2 && x >= n/2) return draw(n/2, x%(n/2), y%(n/2));
    if (y >= n/2 && x < n/2) return (Math.pow((n/2), 2) * 2) + draw(n/2, x%(n/2), y%(n/2));
    if (y >= n/2 && x >= n/2) return (Math.pow((n/2), 2) * 3) + draw(n/2, x%(n/2), y%(n/2));
}
console.log(draw(4, 0, 3));
*/
// js => java, 이 코드는 Js에서 java로 바꾸던 중 시간이 끝나 채점해보지 못한 코드입니다.
// 따라서 로직이 틀린 코드일 수 있습니다.
// 4번 문제를 보고 분할 정복 문제라고 생각을 했습니다.
// x가 열, y가 행입니다.
public static int draw (int n, int x, int y) {
  // n이 1이면 1
  if (n == 1) return 1;
  /*
    배열을 x,y축으로 각각 반반으로 쪼갰을 때 (== n/2),
    x(열),y(행)가 그것보다 작으면 왼편이고 윗쪽
    x(열)가 그것과 같거나 크면서 y(행)는 그것보다 작으면 오른편이고 윗쪽
    y가 그것과 같거나 크면서 x는 그것보다 작으면 왼편 아래
    y가 그것과 같거나 크면서 x도 크면 오른쪽 아래

    아주 작은 최소 단위 N = 2라고 가정했을 때
    ㅡㅡㅡㅡ
    | 2| 1|
    ㅡㅡㅡㅡ
    | 3| 4|
    ㅡㅡㅡㅡ
    0,0이 들어가면 첫번째 조건문으로 들어가고 n/2의 제곱 => 즉 1 + draw(n/2, ~~, ~~)인데 n이 1이 되면서 1을 뱉어냄
    => 따라서 1 + 1이 되어 return 2
    1,0이 들어갈 경우 두번째 조건문으로 들어가고 이 경우 그대로 n/2를 넣어 재귀 호출인데 n이 1이 됨
    => return 1
    0,1이 들어갈 경우 세번째 조건문으로 들어가고 이 경우 n/2의 제곱에 2를 곱해서 2 + n/2를 넣어 호출하면 n이 1이 됨
    => 따라서 2 + 1이 되어 return 3
    1,1이 들어갈 경우 네번째 조건문으로 들어가고 이 경우 n/2의 제곱에 3를 곱해서 3 + n/2를 넣어 호출하면 n이 3이 됨
    => 따라서 3 + 1이 되어 return 4

    조금 더 크기를 키워서 N = 4라고 가정했을 때
    ㅡㅡㅡㅡㅡㅡㅡ
    | 6| 5| 2| 1|
    ㅡㅡㅡㅡㅡㅡㅡ
    | 7| 8| 3| 4|
    ㅡㅡㅡㅡㅡㅡㅡ
    |10| 9|14|13|
    ㅡㅡㅡㅡㅡㅡㅡ
    |11|12|15|16|
    ㅡㅡㅡㅡㅡㅡㅡ
    0,0이 들어갈 경우 첫번째 조건문으로 투입 => n/2의 제곱 => 2의 제곱, 4 +
    n/2인 2가 들어가서 다시 재귀, 다시 첫번째 조건문으로 들어와서 n/1 => 1의 제곱 + n이 1인 상태로 돌아가 다시 +1 => 2
    4 + 2 => 6

    2,2가 들어갈 경우 네번째 조건문으로 투입 => n/2의 제곱 * 3 => 4 * 3 = 12
    n/2인 2가 들어가서 다시 재귀, 다시 첫번째 조건문으로 들어와서 n/1 => 1의 제곱 + n이 1인 상태로 돌아가 다시 +1 => 2
    12 + 2 => 14

    위와 같이 입력받은 좌표를 반으로 쪼개고 다시 쪼개서 값을 반환받음.
  */

	if (y < n/2 && x < n/2) return (int) (Math.pow((n/2), 2) + draw(n/2, x%(n/2), y%(n/2)));
	if (y < n/2 && x >= n/2) return draw(n/2, x%(n/2), y%(n/2));
	if (y >= n/2 && x < n/2) return (int) ((Math.pow((n/2), 2) * 2) + draw(n/2, x%(n/2), y%(n/2)));
	if (y >= n/2 && x >= n/2) return (int) ((Math.pow((n/2), 2) * 3) + draw(n/2, x%(n/2), y%(n/2)));
	return 1;
}
